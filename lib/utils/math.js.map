{"version":3,"file":"math.js","sourceRoot":"","sources":["../../src/utils/math.ts"],"names":[],"mappings":";;AAEA,IAAM,sBAAsB,GAAQ;IAClC,CAAC,EAAE,GAAG;IACN,EAAE,EAAE,IAAI;IACR,KAAK,EAAE,KAAK;IACZ,KAAK,EAAE,KAAK;CACb,CAAC;AAEF,wBAA+B,aAAsB;IACnD,MAAM,CAAC,UAAC,CAAC,EAAE,EAAkB,EAAE,eAAe;YAAjC,cAAc,EAAd,mCAAc;QACzB,EAAE,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,MAAM,IAAI,aAAa,CAAC,CAAC,CAAC;YAC9D,MAAM,CAAC;QACT,CAAC;QACD,IAAM,OAAO,GAAG,CAAC,aAAa,GAAG,YAAY,GAAG,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxE,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC;QACT,CAAC;QACD,IAAM,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QACzB,IAAM,GAAG,GAAG,sBAAsB,CAAC,KAAK,CAAC,CAAC;QAC1C,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC3B,IAAI,KAAK,GAAG,EAAE,CAAC;QACf,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,OAAO,GAAG,KAAK,CAAC;QACpB,OAAO,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,OAAO,EAAE,CAAC;YACpD,OAAO,GAAG,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAC7B,KAAK,IAAI,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;YAC5D,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YACd,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAClB,CAAC;QACD,MAAM,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,KAAK,GAAG,KAAK,GAAG,GAAG,EAAE,KAAK,GAAG,GAAG,EAAE,KAAK,CAAC,GAAG,SAAS,CAAC;IAC1E,CAAC,CAAC;AACJ,CAAC;AAvBD,wCAuBC","sourcesContent":["import { Rule } from \"../parser\";\n\nconst START_TO_END_DELIMITER: any = {\n  $: \"$\",\n  $$: \"$$\",\n  \"\\\\[\": \"\\\\]\",\n  \"\\\\(\": \"\\\\)\",\n};\n\nexport function newMathMatcher(inlineMatcher: boolean): Rule[\"match\"] {\n  return (s, { inline = false }, previousCapture) => {\n    if (previousCapture.endsWith(\"\\\\\") || inline != inlineMatcher) {\n      return;\n    }\n    const startRE = (inlineMatcher ? /^(\\$|\\\\\\()/ : /^(\\$\\$|\\\\\\[)/).exec(s);\n    if (startRE == null) {\n      return;\n    }\n    const start = startRE[1];\n    const end = START_TO_END_DELIMITER[start];\n    s = s.substr(start.length);\n    let match = \"\";\n    let brace = 0;\n    let escaped = false;\n    while (!s.startsWith(end) || brace !== 0 || escaped) {\n      escaped = s.startsWith(\"\\\\\");\n      brace += s.startsWith(\"{\") ? 1 : s.startsWith(\"}\") ? -1 : 0;\n      match += s[0];\n      s = s.substr(1);\n    }\n    return s !== \"\" ? [start + match + end, start + end, match] : undefined;\n  };\n}\n"]}