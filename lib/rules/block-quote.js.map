{"version":3,"file":"block-quote.js","sourceRoot":"","sources":["../../src/rules/block-quote.ts"],"names":[],"mappings":";;AAEA,IAAM,EAAE,GAAG,IAAI,MAAM,CACnB,IAAI;IACF,8BAA8B;IAC9B,OAAO;IACP,yBAAyB;IACzB,SAAS;IACT,2BAA2B;IAC3B,IAAI;IACJ,yBAAyB;IACzB,KAAK,CACR,CAAC;AAEF,kBAAqB;IACnB,KAAK,EAAE,UAAC,CAAC,EAAE,EAAU;YAAR,kBAAM;QAAO,OAAA,CAAC,MAAM,GAAG,SAAS,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAAjC,CAAiC;IAC3D,KAAK,EAAE,UAAC,OAAO,EAAE,KAAK,EAAE,KAAK,IAAK,OAAA,CAAC;QACjC,IAAI,EAAE,YAAY;QAClB,uDAAuD;QACvD,QAAQ,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC;KAC3D,CAAC,EAJgC,CAIhC;CACH,CAAC","sourcesContent":["import { Rule } from \"../parser\";\n\nconst re = new RegExp(\n  \"^(\" +\n    // any amount of space and a >\n    \"\\\\s*>\" +\n    // match any non-newlines\n    \"[^\\\\n]*\" +\n    // find all lines like this\n    \")+\" +\n    // repeat until a newline\n    \"\\\\n\",\n);\n\nexport default <Rule>{\n  match: (s, { inline }) => (inline ? undefined : re.exec(s)),\n  parse: (capture, parse, state) => ({\n    type: \"blockQuote\",\n    // parse by replacing the initial \">\" in front of lines\n    children: parse(capture[0].replace(/^ *> ?/gm, \"\"), state),\n  }),\n};\n"]}