{"version":3,"file":"block-code.js","sourceRoot":"","sources":["../../src/rules/block-code.ts"],"names":[],"mappings":";;AAEA,IAAM,EAAE,GAAG,IAAI,MAAM,CACnB,GAAG;IACD,KAAK;IACL,4DAA4D;IAC5D,kDAAkD;IAClD,0BAA0B;IAC1B,KAAK,CACR,CAAC;AAEF,kBAAqB;IACnB,KAAK,EAAE,UAAC,CAAC,EAAE,EAAU;YAAR,kBAAM;QAAO,OAAA,CAAC,MAAM,GAAG,SAAS,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAAjC,CAAiC;IAC3D,KAAK,EAAE,UAAA,OAAO,IAAI,OAAA,CAAC;QACjB,GAAG,EAAE,MAAM;QACX,iCAAiC;QACjC,KAAK,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE;KAC1E,CAAC,EAJgB,CAIhB;CACH,CAAC","sourcesContent":["import { Rule } from \"../parser\";\n\nconst re = new RegExp(\n  \"^\" +\n    \"```\" +\n    // match anything between ```'s greedy so stops at first ```\n    // note: we include escaped delimiters e.g. \"\\```\"\n    \"((?:[\\\\s\\\\S]|\\\\\\\\```)+)?\" +\n    \"```\",\n);\n\nexport default <Rule>{\n  match: (s, { inline }) => (inline ? undefined : re.exec(s)),\n  parse: capture => ({\n    tag: \"code\",\n    // replace any escaped delimiters\n    props: { display: \"block\", content: capture[1].replace(/\\\\```/g, \"```\") },\n  }),\n};\n"]}