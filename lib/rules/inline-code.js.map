{"version":3,"file":"inline-code.js","sourceRoot":"","sources":["../../src/rules/inline-code.ts"],"names":[],"mappings":";;AAEA,IAAM,EAAE,GAAG,IAAI,MAAM,CACnB,GAAG;IACD,GAAG;IACH,wDAAwD;IACxD,aAAa;IACb,GAAG,CACN,CAAC;AAEF,kBAAqB;IACnB,KAAK,EAAE,EAAE;IACT,KAAK,EAAE,UAAC,CAAC,EAAE,EAAU;YAAR,kBAAM;QAAO,OAAA,CAAC,MAAM,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;IAA5B,CAA4B;IACtD,KAAK,EAAE,UAAA,OAAO,IAAI,OAAA,CAAC;QACjB,IAAI,EAAE,YAAY;QAClB,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;KACpB,CAAC,EAHgB,CAGhB;CACH,CAAC","sourcesContent":["import { Rule } from \"../parser\";\n\nconst re = new RegExp(\n  \"^\" +\n    \"`\" +\n    // match anything between `'s greedy so stops at first *\n    \"([\\\\s\\\\S]+)\" +\n    \"`\",\n);\n\nexport default <Rule>{\n  order: 24,\n  match: (s, { inline }) => (inline ? re.exec(s) : null),\n  parse: capture => ({\n    type: \"inlineCode\",\n    content: capture[2],\n  }),\n};\n"]}