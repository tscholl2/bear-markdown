{"version":3,"file":"inline-code.js","sourceRoot":"","sources":["../../src/rules/inline-code.ts"],"names":[],"mappings":";;AAEA,IAAM,EAAE,GAAG,IAAI,MAAM,CACnB,GAAG;IACD,GAAG;IACH,yDAAyD;IACzD,gEAAgE;IAChE,uBAAuB;IACvB,GAAG,CACN,CAAC;AAEF,kBAAqB;IACnB,KAAK,EAAE,UAAC,CAAC,EAAE,EAAU;YAAR,kBAAM;QAAO,OAAA,CAAC,MAAM,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;IAA5B,CAA4B;IACtD,KAAK,EAAE,UAAA,OAAO,IAAI,OAAA,CAAC;QACjB,GAAG,EAAE,MAAM;QACX,qEAAqE;QACrE,QAAQ,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;KAC3C,CAAC,EAJgB,CAIhB;CACH,CAAC","sourcesContent":["import { Rule } from \"../parser\";\n\nconst re = new RegExp(\n  \"^\" +\n    \"`\" +\n    // match anything between \"`\"s greedy so stops at first *\n    // note: we include escaped \"`\"s as well so it doesn't end early\n    \"((?:[\\\\s\\\\S]|\\\\\\\\`)+)\" +\n    \"`\",\n);\n\nexport default <Rule>{\n  match: (s, { inline }) => (inline ? re.exec(s) : null),\n  parse: capture => ({\n    tag: \"code\",\n    // we replace escaped \"`\"s to allow for using \"`\"s inside inline code\n    children: [capture[1].replace(\"\\\\`\", \"`\")],\n  }),\n};\n"]}