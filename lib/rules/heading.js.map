{"version":3,"file":"heading.js","sourceRoot":"","sources":["../../src/rules/heading.ts"],"names":[],"mappings":";;AAEA,IAAM,EAAE,GAAG,IAAI,MAAM,CACnB,GAAG;IACD,+BAA+B;IAC/B,cAAc;IACd,sBAAsB;IACtB,WAAW;IACX,0DAA0D;IAC1D,yBAAyB,CAC5B,CAAC;AAEF,kBAAqB;IACnB,KAAK,EAAE,UAAC,CAAC,EAAE,EAAU;YAAR,kBAAM;QAAO,OAAA,CAAC,MAAM,GAAG,SAAS,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAAjC,CAAiC;IAC3D,KAAK,EAAE,UAAC,OAAO,EAAE,KAAK,EAAE,KAAU;QAAV,sBAAA,EAAA,UAAU;QAAK,OAAA,CAAC;YACtC,GAAG,EAAE,SAAS;YACd,KAAK,EAAE,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE;YACnC,QAAQ,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;SACxE,CAAC;IAJqC,CAIrC;CACH,CAAC","sourcesContent":["import { Rule } from \"../parser\";\n\nconst re = new RegExp(\n  \"^\" +\n    // look for between 1 and 6 #'s\n    \"(#{1,6})\\\\s*\" +\n    // then any characters\n    \"([^\\\\n]*)\" +\n    // until the end of the line, which may have some #'s also\n    \"(?:\\\\s*#*\\\\s*)?(?=\\n|$)\",\n);\n\nexport default <Rule>{\n  match: (s, { inline }) => (inline ? undefined : re.exec(s)),\n  parse: (capture, parse, state = {}) => ({\n    tag: \"heading\",\n    props: { level: capture[1].length },\n    children: parse(capture[2], Object.assign({}, state, { inline: true })),\n  }),\n};\n"]}