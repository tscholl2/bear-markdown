{"version":3,"file":"paragraph.js","sourceRoot":"","sources":["../../src/rules/paragraph.ts"],"names":[],"mappings":";;AAEA,gBAAgB;AAChB,IAAM,EAAE,GAAG,IAAI,MAAM,CACnB,GAAG;IACD,mBAAmB;IACnB,cAAc;IACd,2DAA2D;IAC3D,YAAY,CACf,CAAC;AAEF,kBAAqB;IACnB,KAAK,EAAE,UAAC,CAAC,EAAE,EAAU,EAAE,aAAa;YAAvB,kBAAM;QACjB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACX,MAAM,CAAC;QACT,CAAC;QACD,uCAAuC;QACvC,EAAE,CAAC,CAAC,CAAC,CAAC,aAAa,KAAK,EAAE,IAAI,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5D,MAAM,CAAC;QACT,CAAC;QACD,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC;IACD,KAAK,EAAE,UAAC,OAAO,EAAE,KAAK,EAAE,KAAK,IAAK,OAAA,CAAC;QACjC,GAAG,EAAE,WAAW;QAChB,QAAQ,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;KAC/E,CAAC,EAHgC,CAGhC;CACH,CAAC","sourcesContent":["import { Rule } from \"../parser\";\n\n// TODO: explain\nconst re = new RegExp(\n  \"^\" +\n    // match everything\n    \"([\\\\s\\\\S]+?)\" +\n    // until the first double new line (i.e. blank line) or end\n    \"(?:\\n\\n|$)\",\n);\n\nexport default <Rule>{\n  match: (s, { inline }, previousMatch) => {\n    if (inline) {\n      return;\n    }\n    // a paragraph must start on a new line\n    if (!(previousMatch === \"\" || previousMatch.endsWith(\"\\n\"))) {\n      return;\n    }\n    return re.exec(s);\n  },\n  parse: (capture, parse, state) => ({\n    tag: \"paragraph\",\n    children: parse(capture[1].trim(), Object.assign({}, state, { inline: true })),\n  }),\n};\n"]}