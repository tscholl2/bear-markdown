{"version":3,"file":"table.js","sourceRoot":"","sources":["../../src/rules/table.ts"],"names":[],"mappings":"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","sourcesContent":["import { Rule } from \"../parser\";\n\n/*\nExample:\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n\nA table is a:\n\n- table row\n- table alignment\n- table row\n- table row\n- ...\n- table row\n*/\n\n// a row is\n// \"|\" then repeat(\"not a |\" then a \"|\") followed by a newline or EOF\nconst tableRowRE = /^s*\\|((?:[^\\|\\n]+\\|)+)\\s*(?=\\n|$)/;\n// an alignment row is\n// \"|\" then a repeat(\":---:\" then a \"|\") followed by a newline\n// where the \":\" are optional and there can be many/few \"-\"'s\nconst tableAlignRE = /^\\s*\\|((?:\\s*:?\\-+:?\\s*\\|)+)\\s*(?=\\n)/;\n\nexport default <Rule>{\n  match: (source, { inline }) => {\n    if (inline) {\n      return;\n    }\n    const head = tableRowRE.exec(source);\n    if (!head) {\n      return;\n    }\n    let match = head[0] + \"\\n\";\n    source = source.substr(head[0].length + 1);\n    const align = tableAlignRE.exec(source);\n    if (!align) {\n      return;\n    }\n    match += align[0] + \"\\n\";\n    source = source.substr(align[0].length + 1);\n    const rows: RegExpExecArray[] = [];\n    while (tableRowRE.test(source)) {\n      rows.push(tableRowRE.exec(source)!);\n      match += rows[rows.length - 1][0] + \"\\n\";\n      source = source.substr(rows[rows.length - 1][0].length + 1);\n    }\n    if (rows.length === 0) {\n      return;\n    }\n    return [match, head[0], align[0], ...rows.map(r => r[0])];\n  },\n  parse: (capture, parse, state) => {\n    const align = capture[2]\n      .replace(/^\\s*\\|\\s*|\\s*\\|\\s*$/g, \"\") // remove beggenning and ending |'s\n      .split(/\\s*\\|\\s*/) // split on |'s\n      .map(a => {\n        const left = a.startsWith(\":\");\n        const right = a.endsWith(\":\");\n        return left === right ? \"center\" : left ? \"left\" : \"right\";\n      });\n    return {\n      type: \"table\",\n      children: [\n        {\n          type: \"tablehead\",\n          children: capture[1]\n            .replace(/^\\s*\\|\\s*|\\s*\\|\\s*$/g, \"\") // remove beggenning and ending |'s\n            .split(/\\s*\\|\\s*/) // split on |'s\n            .map((c, i) => ({\n              type: \"tableheadcolumn\",\n              props: { align: align[i] },\n              children: parse(c, Object.assign({}, state, { inline: true })),\n            })),\n        },\n        {\n          type: \"tablebody\",\n          children: capture.slice(3).map(r => ({\n            type: \"tablerow\",\n            children: r\n              .replace(/^\\s*\\|\\s*|\\s*\\|\\s*$/g, \"\") // remove beggenning and ending |'s\n              .split(/\\s*\\|\\s*/) // split on |'s\n              .map(c => ({\n                type: \"tablecolumn\",\n                children: parse(c, Object.assign({}, state, { inline: true })),\n              })),\n          })),\n        },\n      ],\n    };\n  },\n};\n"]}