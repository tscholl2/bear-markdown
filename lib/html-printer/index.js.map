{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/html-printer/index.ts"],"names":[],"mappings":"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","sourcesContent":["export function printHTML(tree: any[] = [], state: any = {}) {\n  return tree.map(n => {\n    switch (n.type) {\n      case \"text\":\n        return document.createTextNode(n.content);\n      case \"table\":\n        const table = document.createElement(\"table\");\n        const head = document.createElement(\"thead\");\n        n.head.forEach((d: any, i: number) => {\n          const th = document.createElement(\"th\");\n          th.align = n.align[i];\n          printHTML(d, state).forEach((c: any) => th.appendChild(c));\n          head.appendChild(th);\n        });\n        table.appendChild(head);\n        const body = document.createElement(\"tbody\");\n        n.rows.forEach((r: any) => {\n          const row = document.createElement(\"tr\");\n          printHTML(r, state).forEach((c: any) => row.appendChild(c));\n          body.appendChild(row);\n        });\n        table.appendChild(body);\n        return table;\n      case \"paragraph\":\n        const p = document.createElement(\"p\");\n        printHTML(n.children, state).forEach((c: any) => p.appendChild(c));\n        return p;\n      case \"list\":\n        const l = document.createElement(/^\\d/.test(n.bullet) ? \"ol\" : \"ul\");\n        n.items.forEach((item: any) => {\n          const i = document.createElement(\"li\");\n          printHTML(item, state).forEach((c: any) => i.appendChild(c));\n          l.appendChild(i);\n        });\n        return l;\n      case \"link\":\n        const a = document.createElement(\"a\");\n        a.href = n.href;\n        printHTML(n.children, state).forEach((c: any) => a.appendChild(c));\n        return a;\n      case \"image\":\n        const i = document.createElement(\"img\");\n        i.alt = n.alt;\n        i.src = n.src;\n        i.title = n.title;\n        return i;\n      case \"heading\":\n        const h = document.createElement(`h${n.level}`);\n        printHTML(n.children, state).forEach((c: any) => h.appendChild(c));\n        return h;\n      case \"emphasis\":\n        const delimiters: { [key: string]: string } = {\n          __: \"u\",\n          _: \"em\",\n          \"~~\": \"s\",\n          \"~\": \"em\",\n          \"**\": \"strong\",\n          \"*\": \"mark\",\n        };\n        const e = document.createElement(delimiters[n.delimiter]);\n        printHTML(n.children, state).forEach((c: any) => e.appendChild(c));\n        return e;\n      case \"comment\":\n        return document.createComment(n.content);\n      case \"codeBlock\":\n        const pr = document.createElement(\"pre\");\n        const c = document.createElement(\"code\");\n        c.appendChild(document.createTextNode(n.content));\n        pr.appendChild(c);\n        return pr;\n      case \"blockQuote\":\n        const bq = document.createElement(\"blockquote\");\n        printHTML(n.children, state).forEach((c: any) => bq.appendChild(c));\n        return bq;\n      case \"inlineCode\":\n        const cd = document.createElement(\"code\");\n        cd.appendChild(document.createTextNode(n.content));\n        return cd;\n      default:\n        throw new Error(`unimplemented node: ${n.type}`);\n    }\n  });\n}\n"]}